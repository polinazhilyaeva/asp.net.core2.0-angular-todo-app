(function () {
    'use strict';

    angular.module("appTodoList", ["elements", "ngRoute", "angularjs-datetime-picker", "angularMoment"])
        .config(function ($routeProvider, $locationProvider) {
            $routeProvider.when("/", {
                controller: "todoListController",
                templateUrl: "/views/todoListView.html"
            });

            $routeProvider.when("/edit/:todoId", {
                controller: "editTodoController",
                templateUrl: "/views/editTodoView.html"
            });

            $routeProvider.when("/view/:todoId", {
                controller: "viewTodoController",
                templateUrl: "/views/viewTodoView.html"
            });
            
            $routeProvider.when("/new", {
                controller: "newTodoController",
                templateUrl: "/views/newTodoView.html"
            });

            $routeProvider.otherwise({
                redirectTo: "/"
            });

            $locationProvider.hashPrefix('');
        });
})();
(function () {
    'use strict';

    angular.module("appTodoList")
        .directive("invalidDate", invalidDate);

    function invalidDate() {
        return {
            require: "ngModel",
            restrict: "A", // Attributes only
            link: function (scope, element, attrs, ctrl) {
                ctrl.$validators.invalidDate = function (value) {
                    return moment(value, ["DD/MM/YYYY HH:mm"]).isValid();
                }
            }
        };
    }
})();
(function () {
    'use strict';

    angular.module("elements", [])
        .directive("loadingSpinner", loadingSpinner);

    angular.module("elements")
        .directive("deleteConfirmModal", deleteConfirmModal);
    
    function loadingSpinner () {
        return {
            scope: {
                show: "=displayWhen"
            },
            templateUrl: "/views/loadingSpinner.html"
        };
    }

    function deleteConfirmModal() {
        return {
            templateUrl: "/views/deleteConfirmModal.html",
            controller: "deleteTodoController"
        };
    }
})();
(function () {
    "use strict";

    angular.module("appTodoList")
        .factory("todoItem", function (moment, $http, $location, $sce, todoList) {
            var todoItem = {
                properties: {
                    id: null,
                    name: null,
                    priority: null,
                    dueDateTime: null,
                    comment: null
                },

                index: null,

                priorityOptions: [
                    {
                        value: "1",
                        name: "Low"
                    },
                    {
                        value: "2",
                        name: "Normal"
                    },
                    {
                        value: "3",
                        name: "High"
                    }
                ],

                /*
                    This function gets called by click handlers
                    of 'view', 'edit' and 'complete' buttons of a list item.
                    It passes corresponding data and saves it
                    to the 'todoItem' object
                */
                set: function (todo, index) {
                    angular.copy(todo, todoItem.properties);
                    if (index === "undefined") {
                        todoItem.index = null;
                    }
                    else {
                        todoItem.index = index;
                    }
                },

                /*
                    Gets called after 'view', 'edit' or 'complete'
                    operation is done on a list item so that 'todoItem'
                    object can be used by another operation
                */
                reset: function () {
                    todoItem.properties = {
                        id: null,
                        name: null,
                        priority: null,
                        dueDateTime: null,
                        comment: null
                    };

                    todoItem.index = null;
                },

                /*
                    Functions whith REST API requests
                */

                saveNewTodo: function (scope) {
                    return function () {
                        var date = scope.todo.dueDateTime,
                            todo = {};

                        todo.name = scope.todo.name;
                        todo.priority = scope.todo.priority;
                        todo.dueDateTime = todoItem.toServerFormat(date);
                        todo.comment = scope.todo.comment;

                        scope.isBusy = true;
                        scope.errorMessage = "";

                        $http.post("/api/todos", todo)
                            .then(function (response) {
                                todoList.addTodo(response.data);
                                $location.path("#/");
                            }, function (response) {
                                scope.errorMessage = "Failed to save a task to the server";
                            })
                            .finally(function () {
                                scope.isBusy = false;
                            });
                    }
                },

                updateTodo: function (scope) {
                    return function () {                      
                        scope.todo.dueDateTime = todoItem.toServerFormat(scope.todo.dueDateTime);

                        scope.isBusy = true;
                        scope.errorMessage = "";

                        $http.put("/api/todos/" + scope.todo.id, scope.todo)
                            .then(function () {
                                todoList.setTodoAtIndex(scope.todo, todoItem.index);
                                todoItem.reset();
                                $location.path("#/");
                            }, function (response) {
                                scope.errorMessage = "Failed to update a task on the server";
                            })
                            .finally(function () {
                                scope.isBusy = false;
                            });
                    }
                },

                removeTodo: function (scope) {
                    return function () {
                        scope.errorMessage = "";

                        $http.delete("/api/todos/" + todoItem.properties.id)
                            .then(function () {
                                todoList.removeTodo(todoItem.index);
                                todoItem.reset();
                            }, function (response) {
                                scope.errorMessage = "Failed to delete a task from the server";
                            });
                    }
                },

                /*
                    Formatting helper functions
                */

                getDeadlineColor: function (todo) {
                    var now = moment().format(todoItem.serverDatetimeFormat),
                        utcOffset = moment().utcOffset(),
                        deadline = todo.dueDateTime,
                        color = "red",
                        date;

                    date = moment(deadline, todoItem.serverDatetimeFormat)
                        .add(utcOffset, 'm');

                    if (date.isSameOrAfter(now)) {
                        color = "green";
                    }

                    return color;
                },

                getStarsMarkup: function (priority) {
                    var html = "",
                        i;

                    for (i = 1; i <= priority; i++) {
                        html += '<i class="fa fa-star"></i>';
                    }

                    return $sce.trustAsHtml(html);
                },

                getPriorityName: function (priority) {
                    var found;

                    found = todoItem.priorityOptions.find(function (option) {
                        return option.value == priority.toString();
                    });

                    return found.name;
                },

                /*
                    Date/Time formatting helpers
                */

                toClientFormat: function (fromDate) {
                    var fromFormat = "YYYY-MM-DD HH:mm:ss",
                        toFormat = "DD/MM/YYYY HH:mm",
                        toServerFlag = false;
                    return getDateFormatted(fromDate, fromFormat, toFormat, toServerFlag);
                },

                toClientShortFormat: function (fromDate) {
                    var fromFormat = "YYYY-MM-DD HH:mm:ss",
                        toFormat = "DD/MM/YYYY",
                        toServerFlag = false;
                    return getDateFormatted(fromDate, fromFormat, toFormat, toServerFlag);
                },

                toServerFormat: function (fromDate) {
                    var toFormat = "YYYY-MM-DD HH:mm:ss",
                        fromFormat = "DD/MM/YYYY HH:mm",
                        toServerFlag = true;

                    return getDateFormatted(fromDate, fromFormat, toFormat, toServerFlag);
                },

                /*
                    Setting up initial data for views

                    1 - If a view was opened from the list view
                */

                setUpInfoScope: function (scope) {
                    var date = todoItem.properties.dueDateTime,
                        priority = todoItem.properties.priority;

                    scope.todo = {};

                    scope.todo.name = todoItem.properties.name;
                    scope.todo.dueDateTime = todoItem.toClientFormat(date);
                    scope.todo.comment = todoItem.properties.comment;

                    scope.stars = todoItem.getStarsMarkup(priority);
                    scope.priorityName = todoItem.getPriorityName(priority);
                },

                setUpEditScope: function (scope) {
                    var date = todoItem.properties.dueDateTime,
                        priority = todoItem.properties.priority;

                    scope.todo = {};

                    scope.todo.id = todoItem.properties.id;
                    scope.todo.name = todoItem.properties.name;
                    scope.todo.dueDateTime = todoItem.toClientFormat(date);
                    scope.todo.comment = todoItem.properties.comment;

                    scope.priorityOptions = todoItem.priorityOptions;
                    scope.todo.priority = priority.toString();
                },

                /*
                    2 - If a view was not opened from the list view (page has been refreshed)
                */

                setUpEditScopeFromServer: function (todoId, scope) {
                    var setUpFunc = todoItem.setUpEditScope;

                    return setUpScopeFromServer(todoId, scope, setUpFunc);
                },

                setUpInfoScopeFromServer: function (todoId, scope) {
                    var setUpFunc = todoItem.setUpInfoScope;

                    return setUpScopeFromServer(todoId, scope, setUpFunc);
                },
            };

            function getDateFormatted(fromDate, fromFormat, toFormat, toServerFlag) {
                var utcOffset = moment().utcOffset(),
                    date, dateFormatted;

                date = moment(fromDate, fromFormat);

                if (toServerFlag) {
                    date = date.subtract(utcOffset, 'm');
                }
                else {
                    date = date.add(utcOffset, 'm');
                }

                dateFormatted = date.format(toFormat);
                return dateFormatted;
            }

            function setUpScopeFromServer(todoId, scope, setUpFunc) {
                scope.isBusy = true;
                scope.errorMessage = "";

                $http.get("/api/todos/" + todoId)
                    .then(function (response) {
                        angular.copy(response.data, todoItem.properties);
                        setUpFunc(scope);
                        todoItem.reset();
                    }, function () {
                        scope.errorMessage = "Failed to load data from the server. Check the link and try again";
                    })
                    .finally(function () {
                        scope.isBusy = false;
                    });
            }

            return todoItem;
        });
})();
(function () {
    "use strict";

    angular.module("appTodoList")
        .factory("todoList", function ($http) {
            var todoList = {
                list: [],

                get: function () {
                    return todoList.list;
                },

                set: function (list) {
                    todoList.list = list;
                },

                addTodo: function (todo) {
                    todoList.list.push(todo);
                },
            
                removeTodo: function (index) {
                    todoList.list.splice(index, 1);
                },

                setTodoAtIndex: function (todo, index) {
                    todoList.list[index] = todo;
                },

                getFromServer: function (scope) {
                    scope.isBusy = true;
                    scope.errorMessage = "";

                    $http.get("/api/todos")
                        .then(function (response) {
                            angular.copy(response.data, scope.todoList);
                            todoList.set(scope.todoList);
                        }, function () {
                            scope.errorMessage = "Failed to load todo list from the server";
                        })
                        .finally(function () {
                            scope.isBusy = false;
                        });
                }
            };

            return todoList;
        });
})();
(function () {
    'use strict';

    angular.module("appTodoList")
        .controller("todoListController", todoListController);

    function todoListController($scope, $location, todoList, todoItem) {         
        $scope.todoList = todoList.get();

        if ($scope.todoList.length == 0) {
            todoList.getFromServer($scope)
        }

        $scope.getDeadlineColor = todoItem.getDeadlineColor;

        $scope.getDeadline = todoItem.toClientShortFormat;

        $scope.getStars = todoItem.getStarsMarkup;
        
        $scope.viewTodo = function (todo) {
            todoItem.set(todo);
            $location.path("/view/" + todo.id);
        }

        $scope.editTodo = function (todo, index) {
            todoItem.set(todo, index);
            $location.path("/edit/" + todo.id);
        }

        $scope.completeTodo = function (todo, index) {
            todoItem.set(todo, index);
        }
    }
})();
(function () {
    'use strict';

    angular.module("appTodoList")
        .controller("newTodoController", newTodoController);

    function newTodoController($scope, todoItem) {
        // Set options in dropdown list
        $scope.priorityOptions = todoItem.priorityOptions;

        // Set on-click action of 'Save' button
        $scope.addTodo = todoItem.saveNewTodo($scope);
    }
})();
(function () {
    'use strict';

    angular.module("appTodoList")
        .controller("viewTodoController", viewTodoController);

    function viewTodoController($scope, $http, $routeParams, todoItem) {
        /* If a task to view was passed from another view -
           no need to send a request to server */
        if (todoItem.properties.id !== null) {
            todoItem.setUpInfoScope($scope);
        }
        /* Otherwise, if 'Info View' was not opened from another view 
         * or if a page has been refreshed - get data from server */
        else {
            todoItem.setUpInfoScopeFromServer($routeParams.todoId, $scope);
        }
    }
})();
(function () {
    'use strict';

    angular.module("appTodoList")
        .controller("editTodoController", editTodoController);

    function editTodoController($scope, $routeParams, todoItem) {
        /* If a task to edit was passed from another view -
           no need to send a request to server */
        if (todoItem.properties.id !== null) {
            todoItem.setUpEditScope($scope);
        }
        /* Otherwise, if 'Edit View' was not opened from another view 
         * or if a page has been refreshed - get data from server */
        else {
            todoItem.setUpEditScopeFromServer($routeParams.todoId, $scope);
        }

        // Set on-click action of 'Save' button
        $scope.saveTodo = todoItem.updateTodo($scope);
    }
})();
(function () {
    'use strict';

    angular.module("appTodoList")
        .controller("deleteTodoController", deleteTodoController);

    function deleteTodoController($scope, todoItem) {
        // Set CSS id of a modal window
        $scope.deleteModalId = "deleteTodoModal";

        // Set on-click action of 'Complete task' button
        $scope.deleteTodo = todoItem.removeTodo($scope);
    }
})();